<?xml version="1.0"?>
<doc>
    <assembly>
        <name>robot-controller-api</name>
    </assembly>
    <members>
        <member name="M:robot_controller_api.Controllers.MapsController.GetAllMaps">
            <summary>
            Retrieves all maps.
            </summary>
            <returns>A list of all map objects.</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.GetSquareMapsOnly">
            <summary>
            Retrieves only square maps (where Rows == Columns).
            </summary>
            <returns>A list of square maps.</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.GetMapById(System.Int32)">
            <summary>
            Retrieves a map by its unique ID.
            </summary>
            <param name="id">The ID of the map to retrieve.</param>
            <returns>The map object if found; otherwise, NotFound.</returns>
            <response code="200">Returns the requested map.</response>
            <response code="404">If no map is found with the specified ID.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.AddMap(robot_controller_api.Map)">
            <summary>
            Adds a new map.
            </summary>
            <param name="newMap">The map object to add.</param>
            <returns>The created map with its generated ID.</returns>
            <response code="201">If the map is created successfully.</response>
            <response code="400">If the map data is invalid.</response>
            <response code="409">If a map with the same name already exists.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.UpdateMap(System.Int32,robot_controller_api.Map)">
            <summary>
            Updates an existing map.
            </summary>
            <param name="id">The ID of the map to update.</param>
            <param name="updatedMap">The new map data.</param>
            <returns>The updated map if successful.</returns>
            <response code="200">If the map is updated successfully.</response>
            <response code="400">If the update data is invalid.</response>
            <response code="404">If the map does not exist.</response>
            <response code="409">If a map with the same name already exists.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.DeleteMap(System.Int32)">
            <summary>
            Deletes a map by its ID.
            </summary>
            <param name="id">The ID of the map to delete.</param>
            <returns>No content if the deletion is successful.</returns>
            <response code="204">If the map was deleted.</response>
            <response code="404">If the map was not found.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.MapsController.CheckCoordinate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a coordinate is within the bounds of the specified map.
            </summary>
            <param name="id">The ID of the map.</param>
            <param name="x">The x-coordinate (column index).</param>
            <param name="y">The y-coordinate (row index).</param>
            <returns>True if the coordinate is within the map bounds; otherwise, false.</returns>
            <response code="200">Returns true or false based on coordinate validity.</response>
            <response code="400">If the coordinates are invalid (e.g., negative).</response>
            <response code="404">If the map does not exist.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.GetAllRobotCommands">
            <summary>
            Retrieves all robot commands.
            </summary>
            <returns>A list of all robot commands.</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.GetMoveCommandsOnly">
            <summary>
            Retrieves only move commands.
            </summary>
            <returns>A list of robot commands where IsMoveCommand is true.</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.GetRobotCommandById(System.Int32)">
            <summary>
            Retrieves a specific robot command by its ID.
            </summary>
            <param name="id">The ID of the robot command to retrieve.</param>
            <returns>The robot command if found; otherwise, NotFound.</returns>
            <response code="200">Returns the robot command.</response>
            <response code="404">If the robot command is not found.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.AddRobotCommand(robot_controller_api.RobotCommand)">
             <summary>
             Creates a new robot command.
             </summary>
             <param name="newCommand">The robot command to add.</param>
             <returns>The newly created robot command with a URI to retrieve it.</returns>
             <remarks>
             Sample request:
            
                 POST /api/robot-commands
                 {
                     "name": "DANCE",
                     "isMoveCommand": true,
                     "description": "Salsa on the Moon"
                 }
             </remarks>
             <response code="201">Returns the newly created robot command.</response>
             <response code="400">If the command is null or invalid.</response>
             <response code="409">If a command with the same name already exists.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.UpdateRobotCommand(System.Int32,robot_controller_api.RobotCommand)">
            <summary>
            Updates an existing robot command.
            </summary>
            <param name="id">The ID of the command to update.</param>
            <param name="updatedCommand">The updated robot command data.</param>
            <returns>The updated command if successful.</returns>
            <response code="200">Returns the updated command.</response>
            <response code="400">If the update data is invalid.</response>
            <response code="404">If the command with the given ID does not exist.</response>
            <response code="409">If another command with the same name already exists.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.RobotCommandsController.DeleteRobotCommand(System.Int32)">
            <summary>
            Deletes a robot command by its ID.
            </summary>
            <param name="id">The ID of the robot command to delete.</param>
            <returns>No content if successful.</returns>
            <response code="204">If the deletion is successful.</response>
            <response code="404">If the command does not exist.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.GetAllUsers">
            <summary>
            Retrieves all users.
            </summary>
            <returns>A list of all users.</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.GetAdminUsersOnly">
            <summary>
            Retrieves only admin users.
            </summary>
            <returns>A list of users where Role is "admin".</returns>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.GetUserById(System.Int32)">
            <summary>
            Retrieves a specific user by their ID.
            </summary>
            <param name="id">The ID of the user to retrieve.</param>
            <returns>The user if found; otherwise, NotFound.</returns>
            <response code="200">Returns the user.</response>
            <response code="404">If the user is not found.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.CreateUser(robot_controller_api.UserModel)">
            <summary>
            Creates a new user.
            /// </summary>
            <param name="newUser">The user to add.</param>
            <returns>The newly created user with a URI to retrieve it.</returns>
            <remarks>
            Sample request:
            
               POST /api/users
              {
                  "email": "
                 "firstname": "John",
                 "lastname": "Doe",
                 "passwordhash": "hashedpassword",
                 "description": "A sample user",
                 "role": "user",
                 "createddate": "2023-10-01T00:00:00Z",
                "modifieddate": "2023-10-01T00:00:00Z"
              }
            </remarks>
            <response code="201">Returns the created user.</response>
            <response code="400">If the user data is invalid.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.UpdateUser(System.Int32,robot_controller_api.UserModel)">
            <summary>
            Updates an existing except user email and password.
            /// </summary>
            <param name="id">The ID of the user to update.</param>
            <param name="updatedUser">The updated user data.</param>
            <returns>The updated user if successful.</returns>
            <response code="204">No content if the user is updated successfully.</response>
            <response code="400">If the update data is invalid.</response>
            <response code="404">If the user is not found.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Deletes a user by their ID.
            </summary>
            <param name="id">The ID of the user to delete.</param>
            <returns>No content if successful.</returns>
            <response code="204">No content if the user is deleted successfully.</response>
            <response code="404">If the user is not found.</response>
        </member>
        <member name="M:robot_controller_api.Controllers.UsersController.UpdateUserLogin(System.Int32,robot_controller_api.LoginModel)">
            <summary>
            Updates user with email and password.
            /// </summary>
            <param name="id">The ID of the user to update.</param>
            <param name="updatedUserLogin">The updated user data.</param>
            <returns>No content if successful.</returns>
            <remarks>
            Sample request:
            
              PATCH /api/users/{id}
             {
                 "email": "
                "password": "newpassword"
             }
            </remarks>
            <response code="204">No content if the user is updated successfully.</response>
            <response code="400">If the update data is invalid.</response>
            <response code="404">If the user is not found.</response> 
        </member>
        <!-- Badly formed XML comment ignored for member "P:robot_controller_api.Map.Id" -->
        <!-- Badly formed XML comment ignored for member "P:robot_controller_api.RobotCommand.Id" -->
    </members>
</doc>
